// <auto-generated />
using System;
using CCP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CCP.Migrations
{
    [DbContext(typeof(CCPContext))]
    [Migration("20240309123552_RollbackMigration")]
    partial class RollbackMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CCP.Areas.Identity.Data.CCPUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency_stamp_1",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            PasswordHash = "your_hashed_password",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "security_stamp_1",
                            TwoFactorEnabled = false,
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency_stamp_2",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            PasswordHash = "your_hashed_password",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "security_stamp_2",
                            TwoFactorEnabled = false,
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency_stamp_3",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3@EXAMPLE.COM",
                            PasswordHash = "hashed_password_3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "security_stamp_3",
                            TwoFactorEnabled = false,
                            UserName = "user3@example.com"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency_stamp_4",
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4@EXAMPLE.COM",
                            PasswordHash = "hashed_password_4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "security_stamp_4",
                            TwoFactorEnabled = false,
                            UserName = "user4@example.com"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency_stamp_5",
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5@EXAMPLE.COM",
                            PasswordHash = "hashed_password_5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "security_stamp_5",
                            TwoFactorEnabled = false,
                            UserName = "user5@example.com"
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency_stamp_6",
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6@EXAMPLE.COM",
                            PasswordHash = "hashed_password_6",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "security_stamp_6",
                            TwoFactorEnabled = false,
                            UserName = "user6@example.com"
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency_stamp_7",
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7@EXAMPLE.COM",
                            PasswordHash = "hashed_password_7",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "security_stamp_7",
                            TwoFactorEnabled = false,
                            UserName = "user7@example.com"
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency_stamp_8",
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8@EXAMPLE.COM",
                            PasswordHash = "hashed_password_8",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "security_stamp_8",
                            TwoFactorEnabled = false,
                            UserName = "user8@example.com"
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency_stamp_9",
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9@EXAMPLE.COM",
                            PasswordHash = "hashed_password_9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "security_stamp_9",
                            TwoFactorEnabled = false,
                            UserName = "user9@example.com"
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency_stamp_10",
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10@EXAMPLE.COM",
                            PasswordHash = "hashed_password_10",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "security_stamp_10",
                            TwoFactorEnabled = false,
                            UserName = "user10@example.com"
                        });
                });

            modelBuilder.Entity("CCP.Models.BreederModels.Breeder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Breeder");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Breeder Address 1",
                            CountryID = 1,
                            Name = "John Smith",
                            Phone = "123-456-1234",
                            UserID = "user1"
                        },
                        new
                        {
                            ID = 2,
                            Address = "Breeder Address 2",
                            CountryID = 2,
                            Name = "Alice Johnson",
                            Phone = "123-456-1235",
                            UserID = "user2"
                        },
                        new
                        {
                            ID = 3,
                            CountryID = 3,
                            Name = "David Brown",
                            UserID = "user3"
                        });
                });

            modelBuilder.Entity("CCP.Models.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("CCP.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Continent = "Europe",
                            Name = "Denmark"
                        },
                        new
                        {
                            ID = 2,
                            Continent = "Europe",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            ID = 3,
                            Continent = "North America",
                            Name = "Canada"
                        },
                        new
                        {
                            ID = 4,
                            Continent = "Australia",
                            Name = "Australia"
                        },
                        new
                        {
                            ID = 5,
                            Continent = "South America",
                            Name = "Brazil"
                        },
                        new
                        {
                            ID = 6,
                            Continent = "Europe",
                            Name = "Russia"
                        },
                        new
                        {
                            ID = 7,
                            Continent = "Asia",
                            Name = "India"
                        },
                        new
                        {
                            ID = 8,
                            Continent = "Africa",
                            Name = "South Africa"
                        },
                        new
                        {
                            ID = 9,
                            Continent = "South America",
                            Name = "Argentina"
                        },
                        new
                        {
                            ID = 10,
                            Continent = "Asia",
                            Name = "Japan"
                        },
                        new
                        {
                            ID = 11,
                            Continent = "Europe",
                            Name = "Germany"
                        },
                        new
                        {
                            ID = 12,
                            Continent = "Europe",
                            Name = "France"
                        },
                        new
                        {
                            ID = 13,
                            Continent = "North America",
                            Name = "Mexico"
                        },
                        new
                        {
                            ID = 14,
                            Continent = "Africa",
                            Name = "Egypt"
                        },
                        new
                        {
                            ID = 15,
                            Continent = "Europe",
                            Name = "Italy"
                        },
                        new
                        {
                            ID = 16,
                            Continent = "Asia",
                            Name = "Thailand"
                        },
                        new
                        {
                            ID = 17,
                            Continent = "Europe",
                            Name = "Greece"
                        },
                        new
                        {
                            ID = 18,
                            Continent = "Africa",
                            Name = "Nigeria"
                        },
                        new
                        {
                            ID = 19,
                            Continent = "Europe",
                            Name = "Sweden"
                        },
                        new
                        {
                            ID = 20,
                            Continent = "Asia",
                            Name = "China"
                        });
                });

            modelBuilder.Entity("CCP.Models.DogModels.ChampionshipTitle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DogID")
                        .HasColumnType("int");

                    b.Property<int>("OfficialTitleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DogID");

                    b.HasIndex("OfficialTitleID");

                    b.ToTable("ChampionshipTitle");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DogID = 1,
                            OfficialTitleID = 1
                        },
                        new
                        {
                            ID = 2,
                            DogID = 2,
                            OfficialTitleID = 2
                        });
                });

            modelBuilder.Entity("CCP.Models.DogModels.Dog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BreederID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Coat")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("KennelID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("YearOfDeath")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("BreederID");

                    b.HasIndex("KennelID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Dog");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BreederID = "user2",
                            Coat = 0,
                            Color = "Brown",
                            DOB = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Height = 24.5m,
                            OwnerID = "user2",
                            PetName = "Pet1",
                            RegName = "Dog1",
                            RegNo = "RegNo1",
                            Weight = 55.2m,
                            YearOfDeath = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            Coat = 1,
                            Color = "White",
                            DOB = new DateTime(2019, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 18.3m,
                            KennelID = "user1",
                            OwnerID = "user1",
                            PetName = "Buddy",
                            RegName = "Dog2",
                            RegNo = "D67890",
                            Weight = 42.7m
                        },
                        new
                        {
                            ID = 3,
                            BreederID = "user3",
                            Coat = 1,
                            Color = "Red",
                            DOB = new DateTime(2014, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 18.3m,
                            KennelID = "user2",
                            OwnerID = "user3",
                            PetName = "Kiki",
                            RegName = "Dog3",
                            RegNo = "D67893",
                            Weight = 42.7m
                        });
                });

            modelBuilder.Entity("CCP.Models.DogModels.OfficialTitle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FullTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("OfficialTitle");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FullTitle = "Champion of the Show",
                            Title = "Champion"
                        },
                        new
                        {
                            ID = 2,
                            FullTitle = "Grand Champion of the Show",
                            Title = "Grand Champion"
                        },
                        new
                        {
                            ID = 3,
                            FullTitle = "Best in Breed Award",
                            Title = "Best in Breed"
                        },
                        new
                        {
                            ID = 4,
                            FullTitle = "Best in Show Award",
                            Title = "Best in Show"
                        },
                        new
                        {
                            ID = 5,
                            FullTitle = "Reserve Champion of the Show",
                            Title = "Reserve Champion"
                        },
                        new
                        {
                            ID = 6,
                            FullTitle = "Best Puppy Award",
                            Title = "Best Puppy"
                        },
                        new
                        {
                            ID = 7,
                            FullTitle = "Best Veteran Award",
                            Title = "Best Veteran"
                        });
                });

            modelBuilder.Entity("CCP.Models.DogModels.Pedigree", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DamID")
                        .HasColumnType("int");

                    b.Property<int>("LitterID")
                        .HasColumnType("int");

                    b.Property<int?>("SireID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DamID");

                    b.HasIndex("LitterID");

                    b.HasIndex("SireID");

                    b.ToTable("pedigree");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            LitterID = 2
                        },
                        new
                        {
                            ID = 2,
                            DamID = 3,
                            LitterID = 2,
                            SireID = 1
                        });
                });

            modelBuilder.Entity("CCP.Models.ImagesMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DogID")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KennelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DogID");

                    b.HasIndex("KennelId")
                        .IsUnique()
                        .HasFilter("[KennelId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("ImagesMetaData");
                });

            modelBuilder.Entity("CCP.Models.KennelModels.Kennel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Kennel");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            About = "Kennel Description 1",
                            Address = "Kennel Address 1",
                            CountryID = 1,
                            Mobile = "987-654-3210",
                            Name = "Kennel1",
                            OwnerName = "Owner1",
                            Phone = "123-456-7890",
                            UserId = "User1",
                            WebsiteURL = "https://www.kennel1.com"
                        },
                        new
                        {
                            ID = 2,
                            About = "Kennel Description 2",
                            Address = "Kennel Address 2",
                            CountryID = 2,
                            Mobile = "876-543-2109",
                            Name = "Kennel2",
                            OwnerName = "Owner2",
                            Phone = "234-567-8901",
                            UserId = "User2",
                            WebsiteURL = "https://www.kennel2.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CCP.Models.BreederModels.Breeder", b =>
                {
                    b.HasOne("CCP.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", "User")
                        .WithOne("Breeder")
                        .HasForeignKey("CCP.Models.BreederModels.Breeder", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CCP.Models.ChangeLog", b =>
                {
                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CCP.Models.DogModels.ChampionshipTitle", b =>
                {
                    b.HasOne("CCP.Models.DogModels.Dog", "Dog")
                        .WithMany("ChampionshipTitles")
                        .HasForeignKey("DogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCP.Models.DogModels.OfficialTitle", "OfficialTitle")
                        .WithMany("Champions")
                        .HasForeignKey("OfficialTitleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dog");

                    b.Navigation("OfficialTitle");
                });

            modelBuilder.Entity("CCP.Models.DogModels.Dog", b =>
                {
                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", "Breeder")
                        .WithMany("DogBreeder")
                        .HasForeignKey("BreederID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", "Kennel")
                        .WithMany("DogKennel")
                        .HasForeignKey("KennelID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", "Owner")
                        .WithMany("DogOwner")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Breeder");

                    b.Navigation("Kennel");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CCP.Models.DogModels.Pedigree", b =>
                {
                    b.HasOne("CCP.Models.DogModels.Dog", "Dam")
                        .WithMany("DamPedigree")
                        .HasForeignKey("DamID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCP.Models.DogModels.Dog", "Litter")
                        .WithMany("LitterPedigree")
                        .HasForeignKey("LitterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCP.Models.DogModels.Dog", "Sire")
                        .WithMany("SirePedigree")
                        .HasForeignKey("SireID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Dam");

                    b.Navigation("Litter");

                    b.Navigation("Sire");
                });

            modelBuilder.Entity("CCP.Models.ImagesMetaData", b =>
                {
                    b.HasOne("CCP.Models.DogModels.Dog", "Dog")
                        .WithMany("Images")
                        .HasForeignKey("DogID");

                    b.HasOne("CCP.Models.KennelModels.Kennel", "Kennel")
                        .WithOne("Logo")
                        .HasForeignKey("CCP.Models.ImagesMetaData", "KennelId");

                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Dog");

                    b.Navigation("Kennel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CCP.Models.KennelModels.Kennel", b =>
                {
                    b.HasOne("CCP.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", "User")
                        .WithOne("Kennel")
                        .HasForeignKey("CCP.Models.KennelModels.Kennel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CCP.Areas.Identity.Data.CCPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CCP.Areas.Identity.Data.CCPUser", b =>
                {
                    b.Navigation("Breeder")
                        .IsRequired();

                    b.Navigation("DogBreeder");

                    b.Navigation("DogKennel");

                    b.Navigation("DogOwner");

                    b.Navigation("Kennel")
                        .IsRequired();
                });

            modelBuilder.Entity("CCP.Models.DogModels.Dog", b =>
                {
                    b.Navigation("ChampionshipTitles");

                    b.Navigation("DamPedigree");

                    b.Navigation("Images");

                    b.Navigation("LitterPedigree");

                    b.Navigation("SirePedigree");
                });

            modelBuilder.Entity("CCP.Models.DogModels.OfficialTitle", b =>
                {
                    b.Navigation("Champions");
                });

            modelBuilder.Entity("CCP.Models.KennelModels.Kennel", b =>
                {
                    b.Navigation("Logo");
                });
#pragma warning restore 612, 618
        }
    }
}
